plot(D$hosp, xaxt = "n", xlab = "Date", ylab = paste("Number of person hospitalised in",Dpt), ylim = NULL)
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
Dscale
Dscale = aggregate(. ~ jour, Dfull, sum)
View(Dscale)
View(Dfull)
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
HospScale = c(0,1.1*max(Dfull$hosp))   #divide by 100 because 100 departments
HospScale
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
max(Dfull$rea)
which(Dfull$rea[max(Dfull$rea)])
which(Dfull$rea[max(Dfull$rea),])
which(Dfull$rea[,max(Dfull$rea)])
which(max(Dfull$rea))
which(Dfull$rea==maxDfull$rea)
which(Dfull$rea==max(Dfull$rea))
Dfull$rea[which(Dfull$rea==max(Dfull$rea)),]
Dfull$rea[which(Dfull$rea==max(Dfull$rea))]
Dfull$dep[which(Dfull$rea==max(Dfull$rea))]
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
Hab = read.csv(fullfname(DAT_DIR,"habitants.csv", sep = "\t")                    # file reading
)
Hab = read.csv(fullfile(DAT_DIR,"habitants.csv", sep = "\t"))                    # file reading
Hab = read.csv(full.file(DAT_DIR,"habitants.csv", sep = "\t"))                    # file reading
Hab = read.csv(full.files(DAT_DIR,"habitants.csv", sep = "\t"))                    # file reading
Hab = read.csv(fullfiles(DAT_DIR,"habitants.csv", sep = "\t"))                    # file reading
Hab = read.csv(file.path(DAT_DIR,"habitants.csv", sep = "\t"))                    # file reading
Hab = read.csv(file.path(DAT_DIR,"habitants.csv"), sep = "\t")                  # file reading
Hab
View(Hab)
Hab = read.csv(file.path(DAT_DIR,"habitants.csv"), sep = "\t")                  # file reading
View(Hab)
HabDpt = gsub("^75", "", file.path(DAT_DIR,"habitants.csv"))
HabDpt
HabDpt = gsub(".^75", "", file.path(DAT_DIR,"habitants.csv"))
HabDpt
HabDpt = gsub(".^75", "", readLines(file.path(DAT_DIR,"habitants.csv")))
HabDpt = gsub("^75", "", readLines(file.path(DAT_DIR,"habitants.csv")))
HabDpt = readLines(file.path(DAT_DIR,"habitants.csv"))
HabDpt
HabDpt = gsub(".^75", "", readLines(file.path(DAT_DIR,"habitants.csv")))
HabDpt
readLines(file.path(DAT_DIR,"habitants.csv"))
HabDpt
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"))
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
Habtxt
grep("^75",Habtxt)
Habtxt(77)
Habtxt[K77]
Habtxt[77]
grep(paste("^",75,sep=""),Habtxt)
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
lineToRead
Hab = Habtxt[lineToRead]
Hab
Hab = read.csv(Habtxt[lineToRead])
Hab = read.csv(text=Habtxt[lineToRead])
Hab
Hab = read.csv(text=Habtxt[lineToRead],sep="\t")
Hab
lineToRead
Habtxt[lineToRead]
Hab = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
Hab
Hab[2]
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
Hab = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)[2]
Hab
Hab*2
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
Hab = HabLine[2]
Hab
Hab = HabLine[[2]]
Hab
as.numeric(Hab)
as.numeric(read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)[2])
as.integer(read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)[2])
read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)[2]
HabLine
HabLine[3]
HabLine[2]
HabLine[2]*2
as.integer(HabLine)
as.integer(HabLine)[2]
as.string(HabLine)
as.character(HabLine)
HabLine[2]
HabLine
as.numeric(paste(HabLine))
as.numeric(levels(HabLine))[HabLine]
levels(HabLine)
HabLine
levels(HabLine)
levels(HabLine[2])
HabLine[2]
type(HabLine)
class(HabLine)
HabLine[2,1]
HabLine[2,2]
levels(HabLine[2,2])
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
Hab = as.integer(levels(HabLine[2,2]))
Hab
levels(HabLine[2,2])
as.integer(levels(HabLine[2,2]))
as.numeric(levels(HabLine[2,2]))[f]
as.numeric(levels(HabLine[2,2]))
levels(HabLine[2,2])
as.integer(levels(HabLine[2,2]))
as.numeric(levels(HabLine[2,2]))
levels(HabLine[2,2])
levels(HabLine[2,2])[1]
levels(HabLine[2,2])*2
class(levels(HabLine[2,2]))
as.numeric(levels(HabLine[2,2]))
HabLine = gsub(" ", "", read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)))
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE))
HabLine
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
HabLine
gsub(" ", "", HabLine)
Hab = as.integer(gsub(" ","",levels(HabLine[2,2])))
Hab
Hab*2
nDpt = 16
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
Hab = as.integer(gsub(" ","",levels(HabLine[2,2])))
Hab
nDpt = 34
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
Hab = as.integer(gsub(" ","",levels(HabLine[2,2])))
Hab
nDpt = 84
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
Hab = as.integer(gsub(" ","",levels(HabLine[2,2])))
Hab
read.csv(file.path(DAT_DIR,"habitants.csv"))
read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")
sum(read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t"))
read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")
read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")[1]
read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")[2]
sum(read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")[2])
gsub(" ","",read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")[2])
gsub(" ","",read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t"))
read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")
# for example, remove all spaces
df %>%
mutate(across(where(is.character), str_remove_all, pattern = fixed(" ")))
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")
df %>% mutate(across(where(is.character), str_remove_all, pattern = fixed(" ")))
dfnew = df %>% mutate(across(where(is.character), str_remove_all, pattern = fixed(" ")))
View(dfnew)
sum(dfnew)
dfnew[1]
dfnew[2]
class(dfnew[2])
as.integer(dfnew[2])
as.integer(dfnew)
as.integer(dfnew$hab)
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")
df
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep="\t")
df
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
df
df$hab
df$hab-1
df$hab
sum(df$hab)
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
Hab = sum(df$hab)
Hab
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
Habtxt
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
lineToRead
HabLine = read.csv(text=Habtxt[lineToRead],sep="\t",header=FALSE)
HabLine
HabLine[1]
HabLine[2]
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
HabLine
class(HabLine)
Hab = as.integer(gsub(" ","",levels(HabLine[2,2])))
Hab
levels(HabLine[2,2])
levels(HabLine
)
HabLine
HabLine[1]
HabLine[2]
levels(HabLine[2])
class(HabLine[2])
as.integer(HabLine[2])
as.integer(HabLine[2])+1
if (nDpt!=0) {
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
Hab = as.integer(HabLine[2])
} else {
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
Hab = sum(df$hab)
}+1
Hab
nDpt = 0
if (nDpt!=0) {
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
Hab = as.integer(HabLine[2])
} else {
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
Hab = sum(df$hab)
}
Hab
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
scale
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
Dfull$hosp
max(Dfull$hosp)
Dfull$hosp==max(Dfull$hosp)
which(Dfull$hosp==max(Dfull$hosp))
Dfull[which(Dfull$hosp==max(Dfull$hosp))]
Dfull[which(Dfull$hosp==max(Dfull$hosp)),]
Dfull$dep[which(Dfull$hosp==max(Dfull$hosp))]
nDptMax = Dfull$dep[which(Dfull$hosp==max(Dfull$rea))]
#find population of this department
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDptMax,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
HabMax = as.integer(HabLine[2])
HabMax
Dfull[which(Dfull$hosp==max(Dfull$rea)),]
Dfull[which(Dfull$rea==max(Dfull$rea)),]
nDptMax = Dfull[which(Dfull$rea==max(Dfull$rea)),]$dep
nDptMax
DptMax$DC
DptMax$dc
DptMax = Dfull[which(Dfull$rea==max(Dfull$rea)),]
DptMax$dep
DptMax$hosp
DptMax$hosp/HabMax
DptMax$hosp/(HabMax*100)
DptMax$hosp*100/(HabMax)
DptMax$hosp*100000/(HabMax)
DptMax$hosp/(HabMax/100000)
DCscale = c(0,DptMax$dc/HabMax)
DCscale
7000HabMax = HabMax/100000  #Patients per 100 000 habitants
HospScale = c(0,DptMax$hosp/HabMax)
ReaScale = c(0,DptMax$rea/HabMax)
RadScale = c(0,DptMax$rad/HabMax)
DCscale = c(0,DptMax$dc/HabMax)
DCscale
HabMax
HabMax = as.integer(HabLine[2])
HabMax = HabMax/100000  #Patients per 100 000 habitants
HospScale = c(0,DptMax$hosp/HabMax)
ReaScale = c(0,DptMax$rea/HabMax)
RadScale = c(0,DptMax$rad/HabMax)
DCscale = c(0,DptMax$dc/HabMax)
DCscale
HospScale
Hab
D = read.csv(fnameData, sep = ";")                    # file reading
cat(paste("Data imported from : ", fnameData, "\n"))  # inform user
###
#correct bug in data
D$jour[which(D$jour=="27/06/2020")] <- "2020-06-27"
D$jour[which(D$jour=="28/06/2020")] <- "2020-06-28"
D$jour[which(D$jour=="29/06/2020")] <- "2020-06-29"
# Arrange dataframe
D = D[which(D$sexe==0),]            #delete sexes
D$dep = as.factor(D$dep)
Dfull = D                            #save for later use
#######################################################################################################################
#Ask for scale
# TRUE = results exprimed in % of population of department
# FALSE = scale is department specific
InPrct = TRUE #FALSE
Dpt = "Herault"
nDpt = 34
if (missing(InPrct)) {InPrct=FALSE}
# Read number of habitants of department
if (nDpt!=0) {
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
Hab = as.integer(HabLine[2])
} else {
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
Hab = sum(df$hab)
}
#Scale (y Max)
if (InPrct) {
#find worse department
DptMax = Dfull[which(Dfull$rea==max(Dfull$rea)),]
nDptMax = DptMax$dep
#find population of this department
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDptMax,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
HabMax = as.integer(HabLine[2])
HabMax = HabMax/100000  #Patients per 100 000 habitants
#Set scale
HospScale = c(0,DptMax$hosp/HabMax)
ReaScale = c(0,DptMax$rea/HabMax)
RadScale = c(0,DptMax$rad/HabMax)
DCscale = c(0,DptMax$dc/HabMax)
} else {
HospScale = {}
ReaScale = {}
RadScale = {}
DCscale = {}
}
#Init
if ((Dpt == "France") | (nDpt == 0)) {
DDpt = Dfull                            #select all France
} else {
DDpt = Dfull[which(Dfull$dep==nDpt),]   #select departement
}
DDpt = aggregate(. ~ jour, DDpt, sum)   #aggregate by this department
D = DDpt
D
DCscale
RadScale
ReaScale
HospScale
Hab
if(missing(Hab)) {Hab = 1}
#Results in part per 100 000 habitants
if(!is_empty(scale)){
Hab = Hab*100000
} else {
Hab = 1
}
is_empty(scale)
Hab
Hab = Hab/100000
Hab
if(missing(Hab)) {Hab = 1}
#Results in part per 100 000 habitants
if(!is_empty(scale)){
Hab = Hab/100000
} else {
Hab = 1
}
Hab
is_empty(scale)
plot(D$hosp/Hab, xaxt = "n", xlab = "Date", ylab = paste("Number of person hospitalised in",Dpt), ylim = scale)
scale
scale = HospScale
plot(D$hosp/Hab, xaxt = "n", xlab = "Date", ylab = paste("Number of person hospitalised in",Dpt), ylim = scale)
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
D = read.csv(fnameData, sep = ";")                    # file reading
cat(paste("Data imported from : ", fnameData, "\n"))  # inform user
###
#correct bug in data
D$jour[which(D$jour=="27/06/2020")] <- "2020-06-27"
D$jour[which(D$jour=="28/06/2020")] <- "2020-06-28"
D$jour[which(D$jour=="29/06/2020")] <- "2020-06-29"
# Arrange dataframe
D = D[which(D$sexe==0),]            #delete sexes
D$dep = as.factor(D$dep)
Dfull = D                            #save for later use
#######################################################################################################################
#Ask for scale
# TRUE = results exprimed in % of population of department
# FALSE = scale is department specific
InPrct = TRUE #FALSE
#######################################################################################################################
#Begin plots
Dpt = "Herault"
nDpt = 34
if (missing(InPrct)) {InPrct=FALSE}
# Read number of habitants of department
if (nDpt!=0) {
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
Hab = as.integer(HabLine[2])
} else {
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
Hab = sum(df$hab)
}
Hab
InPrct
DptMax = Dfull[which(Dfull$rea==max(Dfull$rea)),]
nDptMax = DptMax$dep
nDptMax
DptMax
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDptMax,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
HabMax = as.integer(HabLine[2])
HabMax = HabMax/100000  #Patients per 100 000 habitants
HabMax
DptMax$hosp/HabMax
DptMax$rea/HabMax
DptMax$rad/HabMax
DptMax$dc/HabMax
DptMax$dc
nDpt = Dfull$dep[which(Dfull$rea==max(Dfull$rea))]
Dpt = as.character(nDpt)
nDpt
Dpt
# Read number of habitants of department
if (nDpt!=0) {
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
Hab = as.integer(HabLine[2])
} else {
df = read.csv(file.path(DAT_DIR,"habitants.csv"),sep=";")
Hab = sum(df$hab)
}
Hab
DptMax = Dfull[which(Dfull$rea==max(Dfull$rea)),]
nDptMax = DptMax$dep
#find population of this department
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDptMax,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
HabMax = as.integer(HabLine[2])
HabMax = HabMax/100000  #Patients per 100 000 habitants
#Set scale
HospScale = c(0,DptMax$hosp/HabMax)
ReaScale = c(0,DptMax$rea/HabMax)
RadScale = c(0,DptMax$rad/HabMax)
DCscale = c(0,DptMax$dc/HabMax)
HospScale
#Init
if ((Dpt == "France") | (nDpt == 0)) {
DDpt = Dfull                            #select all France
} else {
DDpt = Dfull[which(Dfull$dep==nDpt),]   #select departement
}
DDpt = aggregate(. ~ jour, DDpt, sum)   #aggregate by this department
D = DDpt
if(missing(Hab)) {Hab = 1}
#Results in part per 100 000 habitants
if(!is_empty(scale)){
Hab = Hab/100000
} else {
Hab = 1
}
Hab
D$dc
D$dc/Hab
View(Dfull)
ReadInhab <- function(nDpt) {
Habtxt = readLines(file.path(DAT_DIR,"habitants.csv"), warn = FALSE)
lineToRead = grep(paste("^",nDpt,sep=""),Habtxt)
HabLine = read.csv(text=Habtxt[lineToRead],sep=";",header=FALSE)
Hab = as.integer(HabLine[2])
Hab #return number of inhabitants
}
DptMax = Dfull[which(Dfull$rea==max(Dfull$rea)),]
nDptMax = DptMax$dep
#find population of this department
HabMax = ReadInhab(nDptMax)/100000  #Patients per 100 000 habitants
#Set scale
ReaScale = c(0,DptMax$rea/HabMax)
DptMax
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
source('~/GitHub/COVID-19/WRK/PRG/Main.R')
